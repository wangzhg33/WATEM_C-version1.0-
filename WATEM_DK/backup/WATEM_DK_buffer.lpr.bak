program WATEM_DK_buffer;

{$mode objfpc}{$H+}

uses
  {$IFDEF UNIX}{$IFDEF UseCThreads}
  cthreads,
  {$ENDIF}{$ENDIF}
  Classes, SysUtils, fileutil, Dos, gdata, idrisi_proc, lateralredistribution, rdata,
  surface, vector, CustApp, variables, Stat_output, tillage;

type

  { TWATEMApplication }

  TWATEMApplication = class(TCustomApplication)
  protected
    procedure DoRun; override;
  public
    constructor Create(TheOwner: TComponent); override;
    destructor Destroy; override;
    procedure WriteHelp; virtual;
    procedure Set_Parameter_Values; virtual;
  end;

{ TWATEMApplication }

var
//execution var
  hr, mins, se, s1 : word;


procedure StartClock;
begin
  GetTime (hr,mins,se,s1);
end;

Function StopClock:string;
var
  hr2, min2, se2  : word;
begin
  GetTime (hr2, min2, se2, s1);
  result := inttostr(se2-se+(min2-mins)*60+(hr2-hr)*60*60);
end;

Procedure TWATEMApplication.Set_Parameter_Values;
begin
  if Hasoption('dir') then Working_Dir:=GetOptionValue('dir');
  SetCurrentDir(Working_Dir);
  if Hasoption('d','dtm') then dtmfilename:=GetOptionValue('d','dtm');
  if Hasoption('p','prc') then prcfilename:=GetOptionValue('p','prc');
  if Hasoption('u','RKCP') then RKCPfilename:=GetOptionValue('u','RKCP');
  if Hasoption('k','ktc') then ktcfilename:=GetOptionValue('k','ktc');
  if Hasoption('o','outf') then outfilename:=GetOptionValue('o','outf') else outfilename:='watem_out.rst';
  if Hasoption('t','tfca') then TFCA:=strtoint(GetOptionValue('t','tfca')) else TFCA:=100;
  if Hasoption('ktil') then KTIL:=strtoint(GetOptionValue('ktil')) else KTIL:=0;
  if Hasoption('pdep') then PDEPTH:=strtoint(GetOptionValue('pdep')) else PDEPTH:=0;
  if Hasoption('mc_rkcp') then MC_RKCP:=strtoint(GetOptionValue('mc_rkcp')) else MC_RKCP:=0;
  if Hasoption('mc_ktc') then MC_ktc:=strtoint(GetOptionValue('mc_ktc')) else MC_ktc:=0;

  if Hasoption('r','ra') then
   begin
   if GetOptionValue('r','ra')='sd' then ra:=sdra else
      if GetOptionValue('r','ra')='mf' then ra:=mfra;
   end   else ra:=mfra;
  if Hasoption('b','BD') then BD:=strtoint(GetOptionValue('b','BD')) else BD:=1350;

  Cal_Frac:=false;
  if Hasoption('f','frac') then
   begin
    if (GetOptionValue('f','frac')='1') then begin Cal_Frac:=true; ra:=sdra; end //only do fraction calculations with steep descent algorithm
    else Cal_Frac:=false;
   end;

  Write_map:=true;
  if Hasoption('w','write_output') then
   begin
    if (GetOptionValue('w','Write_map')='1') then  Write_map:=true
    else Write_map:=false;
   end;

  Write_detail_Exp:=true;
  if Hasoption('w_d_exp') then
   begin
    if (GetOptionValue('w_d_exp')='1') then  Write_detail_Exp:=true
    else Write_detail_Exp:=false;
   end;


end;

procedure TWATEMApplication.DoRun;
var
  Time:String;
  ErrorMsg: String;
  i,j:      integer;
begin

StartClock;
writeln('WATEM V3.1 BETA version DK Jan 2015');
writeln('Reference: Van Oost et al 2000, Landscape Ecology');
Set_Parameter_Values;

writeln('Reading data from: ',GetCurrentDir);
GetRFile(DTM,dtmfilename);
write('Dem ');
GetRFile(RKCP,RKCPfilename);
write('RKCP ');
GetGFile(ktc,ktcfilename);
write('ktc ');
//Get32bitGFile(LS,prcfilename,PRC);
GetGFile(PRC,prcfilename);
writeln('PRC ');
write('Allocating Memory');
Allocate_Memory;
writeln(': Done');

//CalculateSlopeAspect;
writeln('Topo calculations');
Topo_Calculations(ra,DTM, LS, SLOPE, ASPECT, UPAREA, TFCA);
//writeIdrisi32file(ncol,nrow, ChangeFileExt(outfilename,'')+'_LS', LS);
//writeIdrisi32file(ncol,nrow, ChangeFileExt(outfilename,'')+'_uparea_in_m2', UPAREA);

 for j := 1 to mc_ktc do
 begin
 write('RKCP map:'+inttostr(j)); GetRFile(RKCP,ChangeFileExt(RKCPfilename,'')+'_'+inttostr(j)+'.rst');
 write('ktc map: '+inttostr(j)); GetGFile(ktc,ChangeFileExt(ktcfilename,'')+'_'+inttostr(j)+'.rst');
 SetzeroR(WATEREROS);SetZeroR(W_Export);
 outfilename_temp:=outfilename+'_'+inttostr(j);
 Water(WATEREROS, LS, RKCP, ktc, TFCA, ra, BD);
 writeln('Writing Output');
 If Write_map then
 begin
  writeIdrisi32file(ncol,nrow, ChangeFileExt(outfilename,'')+'_Werodep_in_m'+'_'+inttostr(j), WATEREROS);
  writeIdrisi32file(ncol,nrow, ChangeFileExt(outfilename,'')+'_WExport_in_m'+'_'+inttostr(j), W_Export);
 end;
 Write_STAT(WATEREROS, outfilename+'STAT_Water'+'_'+inttostr(j));
 end;

if KTIL>0 then
 begin
  writeln('Tillage Erosion Module');
  tillage_dif;
  If Write_map then writeIdrisi32file(ncol,nrow, ChangeFileExt(outfilename,'')+'_Terodep_in_m', TILEROS);
  Write_STAT(TILEROS, ChangeFileExt(outfilename,'')+'STAT_Tillage');
 end;

writeln('Releasing Memory');

Release_Memory;
Time:=StopClock;
  Writeln('Program Execution Time: ',Time,' sec');

Terminate;
end;

constructor TWATEMApplication.Create(TheOwner: TComponent);
begin
  inherited Create(TheOwner);
  StopOnException:=True;
end;

destructor TWATEMApplication.Destroy;
begin
  inherited Destroy;
end;

procedure TWATEMApplication.WriteHelp;
begin
  { add your help code here }
  writeln('Usage: ',ExeName,' -h');
end;

var
  Application: TWATEMApplication;
begin
  Application:=TWATEMApplication.Create(nil);
  Application.Title:='Watem';
  Application.Run;
  Application.Free;
end.

