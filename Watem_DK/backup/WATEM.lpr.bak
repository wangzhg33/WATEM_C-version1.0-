program WATEM;

{$mode objfpc}{$H+}

uses
  {$IFDEF UNIX}{$IFDEF UseCThreads}
  cthreads,
  {$ENDIF}{$ENDIF}
  Classes, SysUtils, fileutil, Dos, gdata, idrisi_proc, lateralredistribution, rdata,
  surface, vector, CustApp, variables;

type

  { TWATEMApplication }

  TWATEMApplication = class(TCustomApplication)
  protected
    procedure DoRun; override;
  public
    constructor Create(TheOwner: TComponent); override;
    destructor Destroy; override;
    procedure WriteHelp; virtual;
    procedure Set_Parameter_Values; virtual;
  end;

{ TWATEMApplication }

var
//execution var
  hr, mins, se, s1 : word;


procedure StartClock;
begin
  GetTime (hr,mins,se,s1);
end;

Function StopClock:string;
var
  hr2, min2, se2  : word;
begin
  GetTime (hr2, min2, se2, s1);
  result := inttostr(se2-se+(min2-mins)*60+(hr2-hr)*60*60);
end;

Procedure TWATEMApplication.Set_Parameter_Values;
begin
  if Hasoption('d','dtm') then dtmfilename:=GetOptionValue('d','dtm');
  if Hasoption('p','prc') then prcfilename:=GetOptionValue('p','prc');
  if Hasoption('u','RKCP') then RKCPfilename:=GetOptionValue('u','RKCP');
  if Hasoption('k','ktc') then ktcfilename:=GetOptionValue('k','ktc');
  if Hasoption('o','outf') then outfilename:=GetOptionValue('o','outf') else outfilename:='watem_out.rst';
  if Hasoption('t','tfca') then TFCA:=strtoint(GetOptionValue('t','tfca')) else TFCA:=100;
  if Hasoption('r','ra') then
   begin
   if GetOptionValue('r','ra')='sd' then ra:=sdra else
      if GetOptionValue('r','ra')='mf' then ra:=mfra;
   end   else ra:=mfra;
  if Hasoption('b','BD') then BD:=strtoint(GetOptionValue('b','BD')) else BD:=1350;
end;

procedure TWATEMApplication.DoRun;
var
  Time:String;
  ErrorMsg: String;
begin

StartClock;
writeln('WATEM V3 BETA version July 2014');
writeln('Reference: Van Oost et al 2000, Landscape Ecology');
Set_Parameter_Values;

writeln('Reading data');
GetRFile(DTM,dtmfilename);
GetRFile(RKCP,RKCPfilename);
GetRFile(ktc,ktcfilename);
GetGFile(PRC,prcfilename);
Allocate_Memory;
writeln('Reading data ... done');

//CalculateSlopeAspect;
writeln('topo calculations');
Topo_Calculations(ra,DTM, LS, SLOPE, ASPECT, UPAREA, TFCA);
Water(WATEREROS, LS, RKCP, ktc, TFCA, ra, BD);
writeln('Water Erosion Module');
writeIdrisi32file(ncol,nrow, outfilename, WATEREROS);
writeIdrisi32file(ncol,nrow, outfilename+'_LS', LS);
writeIdrisi32file(ncol,nrow, outfilename+'_uparea', UPAREA);

writeln('Writing Output');
Release_Memory;
Time:=StopClock;
  Writeln('Program Execution Time: ',Time,' sec');

Terminate;
end;

constructor TWATEMApplication.Create(TheOwner: TComponent);
begin
  inherited Create(TheOwner);
  StopOnException:=True;
end;

destructor TWATEMApplication.Destroy;
begin
  inherited Destroy;
end;

procedure TWATEMApplication.WriteHelp;
begin
  { add your help code here }
  writeln('Usage: ',ExeName,' -h');
end;

var
  Application: TWATEMApplication;
begin
  Application:=TWATEMApplication.Create(nil);
  Application.Title:='Watem';
  Application.Run;
  Application.Free;
end.

